@font-face {
    font-family: "Inconsolata";
    src: url('/fonts/Inconsolata-Regular.eot');
    src: local('Inconsolata'), local('Inconsolata-Regular'),
    /**/ url('/fonts/Inconsolata-Regular.woff') format('woff'),
    /**/ url('/fonts/Inconsolata-Regular.ttf') format('truetype'),
    /**/ url('/fonts/Inconsolata-Regular.svg') format('svg');
    font-weight: normal;
    font-style: normal;
}

@font-face {
    font-family: "Inconsolata";
    src: url('/fonts/Inconsolata-Bold.eot');
    src: local('Inconsolata Bold'), local('Inconsolata-Bold'),
    /**/ url('/fonts/Inconsolata-Bold.woff') format('woff'),
    /**/ url('/fonts/Inconsolata-Bold.ttf') format('truetype'),
    /**/ url('/fonts/Inconsolata-Bold.svg') format('svg');
    font-weight: bold;
    font-style: normal;
}

@font-face {
    font-family: "Source Sans Pro";
    src: url('/fonts/SourceSansPro-Regular.eot');
    src: local('Source Sans Pro'), local('SourceSansPro-Regular'),
    /**/ url('/fonts/SourceSansPro-Regular.woff') format('woff'),
    /**/ url('/fonts/SourceSansPro-Regular.ttf') format('truetype'),
    /**/ url('/fonts/SourceSansPro-Regular.svg') format('svg');
    font-weight: normal;
    font-style: normal;
}

@font-face {
    font-family: "Source Sans Pro";
    src: url('/fonts/SourceSansPro-Bold.eot');
    src: local('Source Sans Pro Bold'), local('SourceSansPro-Bold'),
    /**/ url('/fonts/SourceSansPro-Bold.woff') format('woff'),
    /**/ url('/fonts/SourceSansPro-Bold.ttf') format('truetype'),
    /**/ url('/fonts/SourceSansPro-Bold.svg') format('svg');
    font-weight: bold;
    font-style: normal;
}

$break-mobile: 780px;
$break-laptop: 1370px;

@mixin respond-to($media) {
    @if $media == mobile {
        @media only screen and (max-width: $break-mobile) {
            @content;
        }
    }
    @else if $media == laptop {
        @media only screen and (min-width: $break-mobile + 1)
        /**/               and (max-width: $break-laptop - 1) {
            @content;
        }
    }
    @else if $media == desktop {
        @media only screen and (min-width: $break-laptop) {
            @content;
        }
    }
    @else if $media == landscape {
        @media only screen and (orientation: landscape) {
            @content;
        }
    }
    @else if $media == portrait {
        @media only screen and (orientation: portrait) {
            @content;
        }
    }
    @else if $media == touch {
        @at-root .has-touch & {
            @content;
        }
    }
    @else if $media == mouse {
        @at-root .no-touch & {
            @content;
        }
    }
}

@mixin hover-or-active {
    @include respond-to(mouse) { &:hover  { @content; } }
    @include respond-to(touch) { &:active { @content; } }
}

body {
    font-size: 18px;
    line-height: 1.52;
    font-family: 'Inconsolata', monospaced;
    background-color: $bg-color;

    @include respond-to(mobile) {
        font-size: 14px;
    }
    @include respond-to(laptop) {
        font-size: 18px;
    }
    @include respond-to(desktop) {
        font-size: 22px;
    }
}

.content-wrap {
    width: 34em;
    margin: 0 auto;
}

body, a {
    color: $fg-color;
    text-decoration: none;
    margin: 0;
    padding: 0;
}

a {
    padding-bottom: 2px;
    border-bottom: 2px $fg-color solid;
}

a:hover {
    color: $hl-color;
    text-decoration: none;
    border-bottom: 2px $hl-color solid;
}

p {
    margin-bottom: 1.52em;
}

.index {
    position: absolute;
    width: 100%;
    height: 100%;
    overflow: auto;
    margin: 0;
    padding: 0;
}

$logo-height-orig: 14.72em;
$logo-width-orig:  44.55em;
$logo-scale:       0.25;

$logo-height: $logo-height-orig * $logo-scale;
$logo-width:  $logo-width-orig * $logo-scale;

.index-logo {
    position: absolute;
    left: 0;
    right: 3em;
    top: 2em;
    height: $logo-height;
    border: 0;
    &:hover { border: 0; }

    &::before {
        content: "";
        position: absolute;
        width: calc(100% + #{$logo-height}/18 - #{$logo-width});
        top: 9%;
        bottom: 9%;
        background-image: url(#{$logo-sin});
        background-size: contain;
        background-position-x: 100%;
        opacity: $dehighlight0;
    }
    &::after {
        content: "";
        position: absolute;
        height: 100%;
        width: $logo-width;
        right: 0;
        background-image: url(#{$logo-text});
        background-size: contain;
    }
}

.index-intro {
    position: absolute;
    top: calc(50% + 3em);
    width: 20em;
    left: 0; right: 0;
    margin: 0 auto;
    transform: translateY(-50%);
    text-transform: lowercase;

    .portfolio {
        width: 100%;
        text-align: center;
    }

    .tags {
        text-align: center;
        opacity: $dehighlight1;
    }

    .icons {
        text-align: center;
        a { border: 0; }
    }
}

.index-posts {
    position: absolute;
    top: 40%;
    max-width: 30em;
    left: 0; right: 0;
    margin: 0 auto;
    text-transform: lowercase;
    ul {
        list-style-type: '';
    }
    .post-title {
        display: block;
        float: left;
    }
    .post-date {
        display: block;
        float: right;
        opacity: $dehighlight1;
    }
}

.icons-github {}
.icons-twitter {}

.icon {
    display: inline-block;
    fill: $fg-color;
    width: 64px;
    height: 64px;
}

a .icon {
    opacity: $dehighlight1;
    &:hover {
        opacity: 1;
    }
}

article {
    position: absolute;
    top: 40%;
    max-width: 30em;
    left: 0; right: 0;
    margin: 0 auto;

    h1 {
        font-family: 'Source Sans Pro', sans;
        margin-left: -2em;
        font-size: 3em;
    }

    .header {
        font-size: 0.85em;
        opacity: $dehighlight1;
    }
}

code {
    font-family: 'Inconsolata', monospaced;
}

/*
 * this is mostly generated by pandoc
 */

div.sourceCode {
    overflow-x: auto;
    background-color: black;
    margin: 0 -2em;
    padding: 0 2em;
    border-radius: 6px;
}
table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
    margin: 0;
    padding: 0;
    vertical-align:
    baseline;
    border: none;
}
table.sourceCode {
    width: 100%;
    line-height: 100%;
}
td.lineNumbers {
    text-align: right;
    padding-right: 4px;
    padding-left: 4px;
    color: #aaaaaa;
    border-right: 1px solid #aaaaaa;
}
td.sourceCode {
    padding-left: 5px;
}

code > span.kw { color: #f0dfaf; } /* Keyword */
code > span.dt { color: #dfdfbf; } /* DataType */
code > span.dv { color: #dcdccc; } /* DecVal */
code > span.bn { color: #dca3a3; } /* BaseN */
code > span.fl { color: #c0bed1; } /* Float */
code > span.ch { color: #dca3a3; } /* Char */
code > span.st { color: #cc9393; } /* String */
code > span.co { color: #7f9f7f; } /* Comment */
code > span.ot { color: #efef8f; } /* Other */
code > span.al { color: #ffcfaf; } /* Alert */
code > span.fu { color: #efef8f; } /* Function */
code > span.er { color: #c3bf9f; } /* Error */
code > span.wa { color: #7f9f7f; font-weight: bold; } /* Warning */
code > span.cn { color: #dca3a3; font-weight: bold; } /* Constant */
code > span.sc { color: #dca3a3; } /* SpecialChar */
code > span.vs { color: #cc9393; } /* VerbatimString */
code > span.ss { color: #cc9393; } /* SpecialString */
code > span.im { } /* Import */
code > span.va { } /* Variable */
code > span.cf { color: #f0dfaf; } /* ControlFlow */
code > span.op { color: #f0efd0; } /* Operator */
code > span.bu { } /* BuiltIn */
code > span.ex { } /* Extension */
code > span.pp { color: #ffcfaf; font-weight: bold; } /* Preprocessor */
code > span.at { } /* Attribute */
code > span.do { color: #7f9f7f; } /* Documentation */
code > span.an { color: #7f9f7f; font-weight: bold; } /* Annotation */
code > span.cv { color: #7f9f7f; font-weight: bold; } /* CommentVar */
code > span.in { color: #7f9f7f; font-weight: bold; } /* Information */
